name: cd

on:
  workflow_dispatch:
    inputs:
      tag:
        description: Explicit tag, use to override the default patch-increment strategy
        type: string
        required: false
      testpypi:
        description: Whether to upload to testpypi instead of pypi.
        type: boolean
        required: false
        default: false

jobs:
  # TODO add a prerequisite step `bigtest.yml` workflow, but make sure its reliable first
  deploy:
    name: "Build, upload and tag"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    # permissions:
    #   contents: write # we need to commit & push at some point
    steps:
      # - uses: actions/checkout@v4
      #   with:
      #     fetch-tags: true
      #     token: ${{ secrets.GH_REPO_READ_TOKEN }}
      #     persist-credentials: true
      - uses: extractions/setup-just@v3
      - uses: actions/setup-node@v4
      - run: |
          set -euo pipefail
          if [ "${{ inputs.testpypi }}" = "true" ] ; then
            set -x
          fi

          # git config -- manual clone remnant of auth troubleshooting
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          git clone -b $BRANCH --single-branch https://$GH_USER:$GH_TOKEN@github.com/ecmwf/forecast-in-a-box.git .
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://$GH_USER:$GH_TOKEN@github.com/ecmwf/forecast-in-a-box.git
          git fetch --tags origin

          # derive the tag
          if [ "${{ inputs.testpypi }}" = "true" ] ; then
            TAG_PREF="d"
          else
            TAG_PREF="v"
          fi
          if [ -n "${{ inputs.tag }}" ] ; then
            TAG="${{ inputs.tag }}"
            # TODO some verification, like starts with pref, does not exist, etc
          else
            LATEST_TAG=$(git describe --tags --abbrev=0 --match "${TAG_PREF}*" 2>/dev/null || echo "${TAG_PREF}0.0.0")
            VERSION_NUMBERS=${LATEST_TAG#$TAG_PREF}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_NUMBERS"
            NEW_PATCH=$((PATCH + 1))
            TAG="${TAG_PREF}${MAJOR}.${MINOR}.${NEW_PATCH}"
            echo "determined tag = $TAG"
          fi

          # prereqs
          curl -LsSf https://astral.sh/uv/install.sh | sh
          uv venv venv && source venv/bin/activate
          uv pip install twine build

          # build
          # we dirty the repo with the frontend build, scm would not pick the tag correctly on its own
          export SETUPTOOLS_SCM_PRETEND_VERSION=${TAG#$TAG_PREF}
          just fiabwheel
          pushd backend
          twine check ./dist/*
          uv export -o pylock.toml --no-emit-workspace --all-extras --no-dev > ../install/pylock.toml
          popd

          # test
          pushd backend
          uv pip install -r ../install/pylock.toml
          uv pip install ./dist/*whl
          uv pip install pytest pytest-xdist pytest-asyncio # TODO how to get this from pyproject?
          # TODO redesign the workflow to allow for arch-platform matrix here...? But from where to push the lock?
          pytest ./tests
          popd

          # upload
          if [ "${{ inputs.testpypi }}" = "true" ] ; then
            export TWINE_PASSWORD="$TWINE_PASSWORD_TEST"
            TARGET="--repository testpypi"
          else
            export TWINE_PASSWORD="$TWINE_PASSWORD_PROD"
            TARGET=""
          fi
          twine upload --verbose $TARGET backend/dist/*

          # commit & tag
          git add install/pylock.toml
          git commit -m "Release $TAG"
          git push
          git tag $TAG
          git push origin $TAG

        env:
          TWINE_PASSWORD_PROD: ${{ secrets.PYPI_API_TOKEN }}
          TWINE_PASSWORD_TEST: ${{ secrets.PYPI_TEST_API_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_REPO_READ_TOKEN }} # says read but actually is write -- and we need that
          GH_USER: deploy
